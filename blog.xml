<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>vbaliga.github.io</title>
<link>https://github.com/vbaliga/vbaliga.github.io/blog.html</link>
<atom:link href="https://github.com/vbaliga/vbaliga.github.io/blog.xml" rel="self" type="application/rss+xml"/>
<description></description>
<image>
<url>https://github.com/vbaliga/vbaliga.github.io/images/vbaliga.github.io - social preview.png</url>
<title>vbaliga.github.io</title>
<link>https://github.com/vbaliga/vbaliga.github.io/blog.html</link>
</image>
<generator>quarto-1.0.38</generator>
<lastBuildDate>Sat, 27 Jun 2020 00:00:00 GMT</lastBuildDate>
<item>
  <title>Replace text within all cells of a specific column in R</title>
  <dc:creator>Vikram B. Baliga</dc:creator>
  <link>https://github.com/vbaliga/vbaliga.github.io/posts/2020-06-27-replace-text-in-specific-column/index.html</link>
  <description><![CDATA[ 
<!-- Google tag (gtag.js) -->
<script async="" src="https://www.googletagmanager.com/gtag/js?id=G-FJ398GVKTF"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FJ398GVKTF');
</script>



<p>Recently, I needed to find a way to rename specific cells within one column of a tibble without affecting cells in other columns. I knew that <code>stringr::str_replace()</code> is awesome for this sort of thing, but I hadn’t quite grasped how I could target specific columns with it.</p>
<p>Fortunately,<code>dplyr::mutate_at()</code>, and newer mechanisms via <code>dplyr::across()</code>, seem to fit the bill. I’ll run through a few examples in this post.</p>
<p>We’ll start by loading <code>tidyverse</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse) <span class="do" style="color: #5E5E5E;
font-style: italic;">## I'm  using v1.3.0.9000</span></span></code></pre></div>
</div>
<section id="the-data" class="level2">
<h2 class="anchored" data-anchor-id="the-data">The data</h2>
<p>We’ll now generate an example <code>tibble</code> to work with which we will simply call <code>data</code>.</p>
<p><em>Code to make this object will be appended to the end of this post so we can get to the punchline faster. Look down there if you’d like to re-create this example fully on your own</em></p>
<p>Here’s how <code>data</code> looks:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">data</span></code></pre></div>
</div>
<pre><code># A tibble: 100 × 5
   subject       treatment      var1   var2   var3
   &lt;chr&gt;         &lt;chr&gt;         &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;
 1 subject_c 003 treatment z  0.452  0.464  0.231 
 2 subject_c 003 treatment y  0.0412 0.165  0.350 
 3 subject_c 003 treatment y -0.422  0.585  0.605 
 4 subject_b 003 treatment z -2.05   0.271  0.453 
 5 subject_c 003 treatment x  1.13   0.230  0.447 
 6 subject_b 003 treatment x -1.46   0.691  0.413 
 7 subject_b 003 treatment z  0.740  0.283  0.0504
 8 subject_b 003 treatment y  1.91   0.810  0.587 
 9 subject_c 003 treatment y -1.44   0.0939 0.433 
10 subject_a 003 treatment y  0.702  0.822  0.121 
# … with 90 more rows</code></pre>
</section>
<section id="the-issue" class="level2">
<h2 class="anchored" data-anchor-id="the-issue">The issue</h2>
<p>Now say we want to replace the contents of <code>data$subject</code> with something less tedious. Right now, each subject name has <code>003</code> appended to it and we’d like to shave these parts off the names.</p>
<p><code>stringr::str_replace()</code> is great for replacing text that fits a specified criterion. So we could simply tell <code>str_replace()</code> to target instances of <code>003</code> within the <code>subject</code> column. But the object fed into <code>str_replace()</code> needs to be a vector, which can be awkward to pull from a tibble. Moreover, we’d like to do this safely and ensure that no other columns in the tibble are affected.</p>
</section>
<section id="use-mutate_at-with-str_replace" class="level2">
<h2 class="anchored" data-anchor-id="use-mutate_at-with-str_replace">Use <code>mutate_at()</code> with <code>str_replace()</code></h2>
<p>Fortunately, I found that <code>dplyr::mutate_at()</code> can help us target column(s) of interest (here <code>subject</code>) and leave other columns untouched.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">renamed_data <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb4-2">  data <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;">mutate_at</span>(<span class="st" style="color: #20794D;">"subject"</span>, str_replace, <span class="st" style="color: #20794D;">" 003"</span>, <span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb4-4">renamed_data</span></code></pre></div>
</div>
<pre><code># A tibble: 100 x 5
  subject   treatment      var1   var2   var3
  &lt;chr&gt;     &lt;chr&gt;         &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;
1 subject_c treatment z  0.452  0.464  0.231 
2 subject_c treatment y  0.0412 0.165  0.350 
3 subject_c treatment y -0.422  0.585  0.605 
4 subject_b treatment z -2.05   0.271  0.453 
5 subject_c treatment x  1.13   0.230  0.447 
6 subject_b treatment x -1.46   0.691  0.413 
7 subject_b treatment z  0.740  0.283  0.0504
8 subject_b treatment y  1.91   0.810  0.587 
9 subject_c treatment y -1.44   0.0939 0.433 
10 subject_a treatment y  0.702  0.822  0.121 
# … with 90 more rows</code></pre>
<p>Nice!</p>
<p>By using <code>dplyr::mutate_at()</code>, we are specifiying that <code>str_replace()</code> should target the <code>subject</code> column only and take all instances of <code>003</code> and replace them with nothing (<code>""</code>).</p>
<p>For those who prefer to not use pipes, we can accomplish the same thing by specifying <code>data</code> as the first argument in <code>mutate_at()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">renamed_data_no_pipe <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;">mutate_at</span>(data, <span class="st" style="color: #20794D;">"subject"</span>, str_replace, <span class="st" style="color: #20794D;">" 003"</span>, <span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb6-3">renamed_data_no_pipe</span></code></pre></div>
</div>
<pre><code># A tibble: 100 x 5
   subject   treatment      var1   var2   var3
   &lt;chr&gt;     &lt;chr&gt;         &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;
 1 subject_c treatment z  0.452  0.464  0.231 
 2 subject_c treatment y  0.0412 0.165  0.350 
 3 subject_c treatment y -0.422  0.585  0.605 
 4 subject_b treatment z -2.05   0.271  0.453 
 5 subject_c treatment x  1.13   0.230  0.447 
 6 subject_b treatment x -1.46   0.691  0.413 
 7 subject_b treatment z  0.740  0.283  0.0504
 8 subject_b treatment y  1.91   0.810  0.587 
 9 subject_c treatment y -1.44   0.0939 0.433 
10 subject_a treatment y  0.702  0.822  0.121 
# … with 90 more rows</code></pre>
</section>
<section id="use-mutate-and-across-with-str_replace" class="level2">
<h2 class="anchored" data-anchor-id="use-mutate-and-across-with-str_replace">Use <code>mutate()</code> and <code>across()</code> with <code>str_replace()</code></h2>
<p>I should note that the <code>_at</code> component of <code>dplyr</code> has now been considered “superseded”. Instead, the authors of <code>dplyr</code> recommend we use <code>dplyr::across()</code> to target our column(s) of interest. So we can write another version of the above:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">renamed_data_across <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb8-2">  data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="fu" style="color: #4758AB;">across</span>(<span class="st" style="color: #20794D;">"subject"</span>, str_replace, <span class="st" style="color: #20794D;">" 003"</span>, <span class="st" style="color: #20794D;">""</span>))</span>
<span id="cb8-4">renamed_data_across</span></code></pre></div>
</div>
<pre><code># A tibble: 100 x 5
   subject   treatment      var1   var2   var3
   &lt;chr&gt;     &lt;chr&gt;         &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;
 1 subject_c treatment z  0.452  0.464  0.231 
 2 subject_c treatment y  0.0412 0.165  0.350 
 3 subject_c treatment y -0.422  0.585  0.605 
 4 subject_b treatment z -2.05   0.271  0.453 
 5 subject_c treatment x  1.13   0.230  0.447 
 6 subject_b treatment x -1.46   0.691  0.413 
 7 subject_b treatment z  0.740  0.283  0.0504
 8 subject_b treatment y  1.91   0.810  0.587 
 9 subject_c treatment y -1.44   0.0939 0.433 
10 subject_a treatment y  0.702  0.822  0.121 
# … with 90 more rows</code></pre>
<p>Either way, we are able to trim off the extra text in <code>subject</code> names and avoid the potential of affecting other columns.</p>
</section>
<section id="data" class="level2">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<p>Here’s the code that was used to create <code>data</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">strings_subs   <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"subject_a 003"</span>, <span class="st" style="color: #20794D;">"subject_b 003"</span>, <span class="st" style="color: #20794D;">"subject_c 003"</span>)</span>
<span id="cb10-2">strings_treats <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"treatment x"</span>, <span class="st" style="color: #20794D;">"treatment y"</span>, <span class="st" style="color: #20794D;">"treatment z"</span>)</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb10-5">data <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb10-6">  tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">tibble</span>(<span class="at" style="color: #657422;">subject   =</span> <span class="fu" style="color: #4758AB;">sample</span>(strings_subs,   <span class="dv" style="color: #AD0000;">100</span>, <span class="at" style="color: #657422;">replace =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb10-7">                 <span class="at" style="color: #657422;">treatment =</span> <span class="fu" style="color: #4758AB;">sample</span>(strings_treats, <span class="dv" style="color: #AD0000;">100</span>, <span class="at" style="color: #657422;">replace =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb10-8">                 <span class="at" style="color: #657422;">var1 =</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>),</span>
<span id="cb10-9">                 <span class="at" style="color: #657422;">var2 =</span> <span class="fu" style="color: #4758AB;">runif</span>(<span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>),</span>
<span id="cb10-10">                 <span class="at" style="color: #657422;">var3 =</span> <span class="fu" style="color: #4758AB;">rbeta</span>(<span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
</div>
<p>That’s all!</p>
<p>🐢</p>


</section>

 ]]></description>
  <category>R</category>
  <category>stringr</category>
  <category>dplyr</category>
  <category>tidyverse</category>
  <category>data-cleaning</category>
  <guid>https://github.com/vbaliga/vbaliga.github.io/posts/2020-06-27-replace-text-in-specific-column/index.html</guid>
  <pubDate>Sat, 27 Jun 2020 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/vbaliga/vbaliga.github.io/posts/2020-06-27-replace-text-in-specific-column/replace-text-in-specific-column.png" medium="image" type="image/png" height="41" width="144"/>
</item>
<item>
  <title>Searching for sequences on GenBank - a few tips and tricks</title>
  <dc:creator>Vikram B. Baliga</dc:creator>
  <link>https://github.com/vbaliga/vbaliga.github.io/posts/2020-06-13-genbank-searches-tips-and-tricks/index.html</link>
  <description><![CDATA[ 
<!-- Google tag (gtag.js) -->
<script async="" src="https://www.googletagmanager.com/gtag/js?id=G-FJ398GVKTF"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FJ398GVKTF');
</script>



<p>This will be a “low-tech” post, i.e.&nbsp;one that doesn’t showcase code.</p>
<p>Over the past few years, I’ve done a lot of searches for genetic sequences on GenBank with the endgame of building phylogenetic trees. Here’s a list of things that have &amp; haven’t worked for me when it has come to the task of finding specific genes for specific taxa.</p>
<p>A few good ways to set up the search term for nuclear genes are (ordered by specificity):</p>
<ul>
<li><code>(Genus_species) NOT (whole genome) NOT predicted</code></li>
<li><code>(Genus_species) NOT (whole genome) NOT predicted NOT mitochondri\*</code></li>
<li><code>(Genus_species) NOT (whole genome) NOT predicted NOT mitochondri\*</code></li>
</ul>
<p><strong>Note 1</strong>: I always avoid including sequences that have the word “predicted” in the title; I’d rather rely on sequences that have established identity. That said, including <code>NOT predicted</code> can be dangerous as the word “predicted” may appear e.g.&nbsp;in the title of the corresponding paper, but the sequence itself may be known with more certainty.</p>
<p><strong>Note 2</strong>: For similar reasons, <code>NOT (whole genome)</code> may fare better than <code>NOT genome</code></p>
<p><strong>Note 3</strong>: <code>OR</code> needs to be nested within parenthetical statements. Taking the third bullet point as an example, a search without the the parentheses surrounding the <code>OR</code> statement such as <code>(Genus_species) NOT (whole genome) NOT predicted NOT mitochondri* AND gene1 OR gene2</code> would amount to searching for <code>(Genus_species) NOT (whole genome) NOT predicted NOT mitochondri* AND gene1</code> OR <code>gene2</code>. Therefore, all cases of gene2 for every species ever would appear in the search results!</p>
<p>Perhaps this list of notes will grow more someday, but that’s all for now.</p>
<p>🐢</p>



 ]]></description>
  <category>GenBank</category>
  <category>DNA</category>
  <category>tree-inference</category>
  <category>phylogeny</category>
  <category>fasta</category>
  <guid>https://github.com/vbaliga/vbaliga.github.io/posts/2020-06-13-genbank-searches-tips-and-tricks/index.html</guid>
  <pubDate>Sat, 13 Jun 2020 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/vbaliga/vbaliga.github.io/posts/2020-06-13-genbank-searches-tips-and-tricks/genbank-searches-tips-tricks.png" medium="image" type="image/png" height="33" width="144"/>
</item>
<item>
  <title>Parallel processing for MCMCglmm in R (Windows-friendly)</title>
  <dc:creator>Vikram B. Baliga</dc:creator>
  <link>https://github.com/vbaliga/vbaliga.github.io/posts/2019-05-03-parallel-processing-for-mcmcglmm-in-r-windows-friendly/index.html</link>
  <description><![CDATA[ 
<!-- Google tag (gtag.js) -->
<script async="" src="https://www.googletagmanager.com/gtag/js?id=G-FJ398GVKTF"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FJ398GVKTF');
</script>



<p>Lately, I have been using the <a href="https://cran.r-project.org/web/packages/MCMCglmm/index.html">MCMCglmm</a> package to run linear mixed-models in a Bayesian framework. The documentation is generally very good but there seems to be relatively little support for using parallel processing (here: using multiple cores on your machine) to efficiently run large volumes of mcmc runs. This is especially true for Windows users, who cannot use functions like <code>parallel::mclapply()</code>.</p>
<p>I’m happy to share that I have worked out a solution using the <a href="https://www.rdocumentation.org/packages/parallel/versions/3.5.1">parallel</a> package. Basically, I set up a virtual cluster and then use the <code>parallel::parLapply()</code> function to run iterations of <code>MCMCglmm()</code> in parallel.</p>
<section id="data" class="level2">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<p>I’ll use “Example 2” from the <a href="https://www.rdocumentation.org/packages/MCMCglmm/versions/2.26/topics/MCMCglmm">MCMCglmm() function help</a>. You can skip ahead to the next section if instead you’d like to tailor this to your own data &amp; analysis.</p>
<p>First load (or install&amp;load) the <code>MCMCglmm</code> and <code>parallel</code> packages:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## If a package is installed, it will be loaded. If any </span></span>
<span id="cb1-2"><span class="do" style="color: #5E5E5E;
font-style: italic;">## are not, the missing package(s) will be installed </span></span>
<span id="cb1-3"><span class="do" style="color: #5E5E5E;
font-style: italic;">## from CRAN and then loaded.</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="do" style="color: #5E5E5E;
font-style: italic;">## First specify the packages of interest</span></span>
<span id="cb1-6">packages <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"MCMCglmm"</span>, <span class="st" style="color: #20794D;">"parallel"</span>)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="do" style="color: #5E5E5E;
font-style: italic;">## Now load or install&amp;load all</span></span>
<span id="cb1-9">package.check <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lapply</span>(</span>
<span id="cb1-10">  packages,</span>
<span id="cb1-11">  <span class="at" style="color: #657422;">FUN =</span> <span class="cf" style="color: #003B4F;">function</span>(x) {</span>
<span id="cb1-12">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">require</span>(x, <span class="at" style="color: #657422;">character.only =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)) {</span>
<span id="cb1-13">      <span class="fu" style="color: #4758AB;">install.packages</span>(x, <span class="at" style="color: #657422;">dependencies =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb1-14">      <span class="fu" style="color: #4758AB;">library</span>(x, <span class="at" style="color: #657422;">character.only =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb1-15">    }</span>
<span id="cb1-16">  }</span>
<span id="cb1-17">)</span></code></pre></div>
</div>
<p>With the packages loaded, we’ll prep our data set. Lifting this directly from the <code>MCMCglmm()</code> help page:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">data</span>(bird.families)</span>
<span id="cb2-2">phylo.effect <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rbv</span>(bird.families, <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">nodes =</span> <span class="st" style="color: #20794D;">"TIPS"</span>)</span>
<span id="cb2-3">phenotype <span class="ot" style="color: #003B4F;">&lt;-</span> phylo.effect <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="fu" style="color: #4758AB;">dim</span>(phylo.effect)[<span class="dv" style="color: #AD0000;">1</span>], <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;"># simulate phylogenetic and residual effects</span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;"># with unit variance</span></span>
<span id="cb2-7">test.data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">phenotype =</span> phenotype,</span>
<span id="cb2-8">                        <span class="at" style="color: #657422;">taxon =</span> <span class="fu" style="color: #4758AB;">row.names</span>(phenotype))</span>
<span id="cb2-9">Ainv <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">inverseA</span>(bird.families)<span class="sc" style="color: #5E5E5E;">$</span>Ainv</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;"># inverse matrix of shared phyloegnetic history</span></span>
<span id="cb2-12">prior <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">R =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">V =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">nu =</span> <span class="fl" style="color: #AD0000;">0.002</span>), </span>
<span id="cb2-13">              <span class="at" style="color: #657422;">G =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">G1 =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">V =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">nu =</span> <span class="fl" style="color: #AD0000;">0.002</span>)))</span>
<span id="cb2-14"></span>
<span id="cb2-15">model2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">MCMCglmm</span>(</span>
<span id="cb2-16">  phenotype <span class="sc" style="color: #5E5E5E;">~</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb2-17">  <span class="at" style="color: #657422;">random =</span>  <span class="sc" style="color: #5E5E5E;">~</span> taxon,</span>
<span id="cb2-18">  <span class="at" style="color: #657422;">ginverse =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">taxon =</span> Ainv),</span>
<span id="cb2-19">  <span class="at" style="color: #657422;">data =</span> test.data,</span>
<span id="cb2-20">  <span class="at" style="color: #657422;">prior =</span> prior,</span>
<span id="cb2-21">  <span class="at" style="color: #657422;">verbose =</span> <span class="cn" style="color: #8f5902;">FALSE</span>,</span>
<span id="cb2-22">  <span class="at" style="color: #657422;">nitt =</span> <span class="dv" style="color: #AD0000;">1300</span>,</span>
<span id="cb2-23">  <span class="at" style="color: #657422;">burnin =</span> <span class="dv" style="color: #AD0000;">300</span>,</span>
<span id="cb2-24">  <span class="at" style="color: #657422;">thin =</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb2-25">)</span>
<span id="cb2-26"><span class="fu" style="color: #4758AB;">summary</span>(model2)</span></code></pre></div>
</div>
<pre><code> Iterations = 301:1300
 Thinning interval  = 1
 Sample size  = 1000 

 DIC: 375.0159 

 G-structure:  ~taxon


 R-structure:  ~units


 Location effects: phenotype ~ 1 

            post.mean l-95% CI u-95% CI eff.samp pMCMC
(Intercept)    0.1630  -0.5899   0.8938     1000 0.654</code></pre>
<p>Of course, the example provided sets <code>nitt</code> to only 1300, yielding an ESS of only ~800 for the fixed effect. I am guessing this is intended to make sure the example is quick to run.</p>
<p>Boosting this to <code>nitt = 100000</code>, <code>burnin = 10000</code>, and <code>thin = 10</code> gives a more healthy ESS &gt; 8000. But please note that this will take a lot longer to finish (I’ll leave it up to you to use the <code>Sys.time()</code> function to time it yourself).</p>
</section>
<section id="run-mcmc-chains-in-parallel" class="level2">
<h2 class="anchored" data-anchor-id="run-mcmc-chains-in-parallel">Run MCMC chains in parallel</h2>
<p>Whenever conducting MCMC-based analyses, it’s advisable to conduct multiple runs (different chains) and then assess convergence. I’ll leave the convergence assessments for another day (but here’s <a href="https://stats.stackexchange.com/questions/507/what-is-the-best-method-for-checking-convergence-in-mcmc">a good StackExchange post</a>). For now we’ll just conduct 10 runs of this model, each using <code>nitt = 100000</code>, using parallel processing.</p>
<p><em><strong>PLEASE NOTE</strong>: I am setting this up to use only 80% of your machine’s total logical processors. You can certainly harness all of your CPUs if you’d like, although I advise against doing so if any of your MCMC runs take more than a few minutes. It also doesn’t make sense to set the number of logical processors to be greater than the number of runs (chains), but more on that later. Anyway, treat your silicon well!</em></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># use detectCores() by itself if you want all CPUs</span></span>
<span id="cb4-2">setCores <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">round</span>(<span class="fu" style="color: #4758AB;">detectCores</span>() <span class="sc" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.8</span>)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;"># make the cluster</span></span>
<span id="cb4-5">cl <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">makeCluster</span>(<span class="fu" style="color: #4758AB;">getOption</span>(<span class="st" style="color: #20794D;">"cl.cores"</span>, setCores))</span>
<span id="cb4-6">  <span class="co" style="color: #5E5E5E;"># EDIT ON 2020-07-27: I have been informed that Mac users </span></span>
<span id="cb4-7">  <span class="co" style="color: #5E5E5E;"># may have better luck using:</span></span>
<span id="cb4-8">  <span class="co" style="color: #5E5E5E;"># cl &lt;- parallel::makeCluster(getOption("cl.cores", setCores), </span></span>
<span id="cb4-9">  <span class="co" style="color: #5E5E5E;">#                             setup_strategy = "sequential")</span></span>
<span id="cb4-10">  <span class="co" style="color: #5E5E5E;"># This is due to an apparent issue in RStudio. </span></span>
<span id="cb4-11">  <span class="co" style="color: #5E5E5E;"># See this stackoverflow page for details:</span></span>
<span id="cb4-12">  <span class="co" style="color: #5E5E5E;"># https://stackoverflow.com/questions/61700586/r-makecluster-command-used-to-work-but-now-fails-in-rstudio</span></span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;"># load the MCMCglmm package within the cluster</span></span>
<span id="cb4-15">cl.pkg <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">clusterEvalQ</span>(cl, <span class="fu" style="color: #4758AB;">library</span>(MCMCglmm))</span>
<span id="cb4-16"></span>
<span id="cb4-17"><span class="co" style="color: #5E5E5E;"># import each object that's necessary to run the function</span></span>
<span id="cb4-18"><span class="fu" style="color: #4758AB;">clusterExport</span>(cl, <span class="st" style="color: #20794D;">"prior"</span>)</span>
<span id="cb4-19"><span class="fu" style="color: #4758AB;">clusterExport</span>(cl, <span class="st" style="color: #20794D;">"test.data"</span>)</span>
<span id="cb4-20"><span class="fu" style="color: #4758AB;">clusterExport</span>(cl, <span class="st" style="color: #20794D;">"Ainv"</span>)</span>
<span id="cb4-21"></span>
<span id="cb4-22"><span class="co" style="color: #5E5E5E;"># use parLapply() to execute 10 runs of MCMCglmm()</span></span>
<span id="cb4-23"><span class="co" style="color: #5E5E5E;"># each with nitt=100000</span></span>
<span id="cb4-24">model2_10runs <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">parLapply</span>(<span class="at" style="color: #657422;">cl =</span> cl, <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>, <span class="cf" style="color: #003B4F;">function</span>(i) {</span>
<span id="cb4-25">  <span class="fu" style="color: #4758AB;">MCMCglmm</span>(</span>
<span id="cb4-26">    phenotype <span class="sc" style="color: #5E5E5E;">~</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb4-27">    <span class="at" style="color: #657422;">random =</span>  <span class="sc" style="color: #5E5E5E;">~</span> taxon,</span>
<span id="cb4-28">    <span class="at" style="color: #657422;">ginverse =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">taxon =</span> Ainv),</span>
<span id="cb4-29">    <span class="at" style="color: #657422;">data =</span> test.data,</span>
<span id="cb4-30">    <span class="at" style="color: #657422;">prior =</span> prior,</span>
<span id="cb4-31">    <span class="at" style="color: #657422;">verbose =</span> <span class="cn" style="color: #8f5902;">FALSE</span>,</span>
<span id="cb4-32">    <span class="at" style="color: #657422;">nitt =</span> <span class="dv" style="color: #AD0000;">100000</span>,</span>
<span id="cb4-33">    <span class="at" style="color: #657422;">burnin =</span> <span class="dv" style="color: #AD0000;">10000</span>,</span>
<span id="cb4-34">    <span class="at" style="color: #657422;">thin =</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb4-35">  )</span>
<span id="cb4-36">})</span>
<span id="cb4-37"></span>
<span id="cb4-38"><span class="co" style="color: #5E5E5E;"># once it's finished, use stopCluster() to stop running</span></span>
<span id="cb4-39"><span class="co" style="color: #5E5E5E;"># the parallel cluster</span></span>
<span id="cb4-40"><span class="fu" style="color: #4758AB;">stopCluster</span>(cl)</span></code></pre></div>
</div>
<p>The <code>model2_10runs</code> object is a list that contains each of the 10 mcmc models. You can perform all the usual summarization, plotting…etc, but just be sure to specify models within the list, e.g.: <code>summary(model2_10runs[[3]])</code> to summarize the third model out of the 10</p>
<pre><code> Iterations = 10001:99991
 Thinning interval  = 10
 Sample size  = 9000 

 DIC: 109.7491 

 G-structure:  ~taxon

      post.mean l-95% CI u-95% CI eff.samp
taxon     1.782   0.3085    2.989    178.6

 R-structure:  ~units

      post.mean  l-95% CI u-95% CI eff.samp
units    0.4437 0.0001843    1.224    181.1

 Location effects: phenotype ~ 1 

            post.mean l-95% CI u-95% CI eff.samp pMCMC
(Intercept)    0.1697  -0.5989   0.9841     9000 0.666</code></pre>
<p>As I mentioned above, we’ll leave convergence and other fun topics like autocorrelation for another day.</p>
<p>That’s all!<br>
🐢</p>


</section>

 ]]></description>
  <category>R</category>
  <category>MCMCglmm</category>
  <category>parallel</category>
  <category>parallel-processing</category>
  <category>Windows</category>
  <guid>https://github.com/vbaliga/vbaliga.github.io/posts/2019-05-03-parallel-processing-for-mcmcglmm-in-r-windows-friendly/index.html</guid>
  <pubDate>Fri, 03 May 2019 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/vbaliga/vbaliga.github.io/posts/2019-05-03-parallel-processing-for-mcmcglmm-in-r-windows-friendly/mcmcglmm-parallel.png" medium="image" type="image/png" height="147" width="144"/>
</item>
<item>
  <title>Check if packages are installed (and install if not) in R</title>
  <dc:creator>Vikram B. Baliga</dc:creator>
  <link>https://github.com/vbaliga/vbaliga.github.io/posts/2019-04-28-verify-that-r-packages-are-installed-and-loaded/index.html</link>
  <description><![CDATA[ 
<!-- Google tag (gtag.js) -->
<script async="" src="https://www.googletagmanager.com/gtag/js?id=G-FJ398GVKTF"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FJ398GVKTF');
</script>



<p>Say you have an R script that you share with others. You may not be sure that each user has installed all the packages the script will require. Using <code>install.packages()</code> would be unnecessary for users who already have the packages and simply need to load them.</p>
<p>Here’s some code that provides an easy way to check whether specific packages are in the default Library. If they are, they’re simply loaded via <code>library()</code>. If any packages are missing, they’re installed (with dependencies) into the default Library and are then loaded.</p>
<section id="load-install-load-packages" class="level2">
<h2 class="anchored" data-anchor-id="load-install-load-packages">Load | install &amp; load packages</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## If a package is installed, it will be loaded. If any </span></span>
<span id="cb1-2"><span class="do" style="color: #5E5E5E;
font-style: italic;">## are not, the missing package(s) will be installed </span></span>
<span id="cb1-3"><span class="do" style="color: #5E5E5E;
font-style: italic;">## from CRAN and then loaded.</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="do" style="color: #5E5E5E;
font-style: italic;">## First specify the packages of interest</span></span>
<span id="cb1-6">packages <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"MASS"</span>, <span class="st" style="color: #20794D;">"nlme"</span>)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="do" style="color: #5E5E5E;
font-style: italic;">## Now load or install&amp;load all</span></span>
<span id="cb1-9">package.check <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lapply</span>(</span>
<span id="cb1-10">  packages,</span>
<span id="cb1-11">  <span class="at" style="color: #657422;">FUN =</span> <span class="cf" style="color: #003B4F;">function</span>(x) {</span>
<span id="cb1-12">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">require</span>(x, <span class="at" style="color: #657422;">character.only =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)) {</span>
<span id="cb1-13">      <span class="fu" style="color: #4758AB;">install.packages</span>(x, <span class="at" style="color: #657422;">dependencies =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb1-14">      <span class="fu" style="color: #4758AB;">library</span>(x, <span class="at" style="color: #657422;">character.only =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb1-15">    }</span>
<span id="cb1-16">  }</span>
<span id="cb1-17">)</span></code></pre></div>
</div>
<p>The logic of the <code>package.check()</code> function basically goes:</p>
<ul>
<li><p>Using <code>lapply()</code> to the list of <code>packages</code>,</p></li>
<li><p>If a package is not installed, install it.</p></li>
<li><p>Otherwise, load it.</p></li>
</ul>
<p>You can then use <code>search()</code> to determine whether all the packages have loaded.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">search</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] ".GlobalEnv"        "package:nlme"      "package:MASS"     
 [4] "tools:quarto"      "package:stats"     "package:graphics" 
 [7] "package:grDevices" "package:datasets"  "renv:shims"       
[10] "package:utils"     "package:methods"   "Autoloads"        
[13] "package:base"     </code></pre>
</div>
</div>
<p>That’s all!<br>
🐢</p>


</section>

 ]]></description>
  <category>R</category>
  <category>packages</category>
  <category>package-installation</category>
  <category>package-loading</category>
  <guid>https://github.com/vbaliga/vbaliga.github.io/posts/2019-04-28-verify-that-r-packages-are-installed-and-loaded/index.html</guid>
  <pubDate>Sun, 28 Apr 2019 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/vbaliga/vbaliga.github.io/posts/2019-04-28-verify-that-r-packages-are-installed-and-loaded/verify-that-r-package.png" medium="image" type="image/png" height="117" width="144"/>
</item>
<item>
  <title>Set max DLLs in R (Windows)</title>
  <dc:creator>Vikram B. Baliga</dc:creator>
  <link>https://github.com/vbaliga/vbaliga.github.io/posts/2019-04-22-set-max-DLLs-in-r/index.html</link>
  <description><![CDATA[ 
<!-- Google tag (gtag.js) -->
<script async="" src="https://www.googletagmanager.com/gtag/js?id=G-FJ398GVKTF"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FJ398GVKTF');
</script>



<p>On occasion, you may need adjust the max number of .dll files that R can handle. I first encountered this need when using a high number of packages together.</p>
<p>I’ve had trouble finding this info in the past, so I decided to create this post for others. This works if you are using Windows.</p>
<p>The following is machine-specific, so you will need to do this on each computer you run R.</p>
<section id="find-the-.renviron-file" class="level2">
<h2 class="anchored" data-anchor-id="find-the-.renviron-file">Find the <code>.Renviron</code> file</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">user_renviron <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb1-2">  <span class="fu" style="color: #4758AB;">path.expand</span>(<span class="fu" style="color: #4758AB;">file.path</span>(<span class="st" style="color: #20794D;">"~"</span>, <span class="st" style="color: #20794D;">".Renviron"</span>))</span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># check to see if the file already exists</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># typically under: "C:/Users/YOURUSERNAME/Documents/.Renviron"</span></span>
<span id="cb1-5"><span class="cf" style="color: #003B4F;">if</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">file.exists</span>(user_renviron)) </span>
<span id="cb1-6">  <span class="fu" style="color: #4758AB;">file.create</span>(user_renviron)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;">file.edit</span>(user_renviron) </span></code></pre></div>
</div>
<p>If <code>file.edit(user_renviron)</code> fails to work, just open the file itself (located wherever <code>user_renviron</code> is pointing) with a text editor.</p>
</section>
<section id="edit-max-dlls" class="level2">
<h2 class="anchored" data-anchor-id="edit-max-dlls">Edit max DLLs</h2>
<p>Once you have the file open, edit or add the following line, save, and restart R:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">R_MAX_NUM_DLLS<span class="ot" style="color: #003B4F;">=</span><span class="dv" style="color: #AD0000;">500</span></span></code></pre></div>
</div>
<p>🐢</p>


</section>

 ]]></description>
  <category>R</category>
  <category>DLLs</category>
  <category>Windows</category>
  <guid>https://github.com/vbaliga/vbaliga.github.io/posts/2019-04-22-set-max-DLLs-in-r/index.html</guid>
  <pubDate>Mon, 22 Apr 2019 00:00:00 GMT</pubDate>
  <media:content url="https://github.com/vbaliga/vbaliga.github.io/posts/2019-04-22-set-max-DLLs-in-r/set-max-DLLs-r.png" medium="image" type="image/png" height="85" width="144"/>
</item>
</channel>
</rss>
